@model PsrGameServer.Controllers.RoundCompleteViewModel
@{
    ViewData["Title"] = $"Round {Model.CompletedRoundNumber} Complete";
}

<link rel="stylesheet" href="~/css/tournament.css" />

<div class="container-fluid">
    <div class="row">
        <div class="col-12 text-center">
            <div class="round-complete-header">
                <h1 class="display-3 text-white">ðŸŽ‰ Round @Model.CompletedRoundNumber Complete!</h1>
                <p class="lead text-white">Let's see how everyone performed...</p>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-10 mx-auto">
            <div class="card shadow-lg">
                <div class="card-header bg-info text-white text-center">
                    <h3><i class="fas fa-trophy"></i> Updated Leaderboard</h3>
                    <p class="mb-0">After Round @Model.CompletedRoundNumber of @PsrGameServer.Models.Tournament.MaxRounds</p>
                </div>
                <div class="card-body">
                    <div class="leaderboard-container">
                        @{
                            var sortedPlayers = Model.Tournament.Players
                                .OrderByDescending(p => p.TotalScore)
                                .ThenBy(p => p.Name)
                                .ToList();
                        }
                        @for (int i = 0; i < sortedPlayers.Count; i++)
                        {
                            var player = sortedPlayers[i];
                            var position = i + 1;
                            var medal = "";
                            var rankClass = "";
                            
                            if (position == 1) { medal = "ðŸ¥‡"; rankClass = "gold"; }
                            else if (position == 2) { medal = "ðŸ¥ˆ"; rankClass = "silver"; }
                            else if (position == 3) { medal = "ðŸ¥‰"; rankClass = "bronze"; }
                            
                            var thisRoundResult = Model.RoundResults.FirstOrDefault(r => r.PlayerId == player.Id);
                            var roundScore = thisRoundResult?.Score ?? 0;
                            
                            <div class="leaderboard-item @rankClass" style="animation-delay: @(i * 0.2)s" data-final-score="@player.TotalScore" data-round-score="@roundScore">
                                <div class="rank-container">
                                    <div class="rank-number">@position</div>
                                    @if (!string.IsNullOrEmpty(medal))
                                    {
                                        <div class="medal">@medal</div>
                                    }
                                </div>
                                <div class="player-info">
                                    <h4 class="player-name">@player.Name</h4>
                                    <div class="score-details">
                                        <span class="round-score">+@roundScore</span>
                                        <span class="total-score" data-target="@player.TotalScore">@(player.TotalScore - roundScore)</span>
                                    </div>
                                </div>
                                <div class="score-animation">
                                    <div class="progress-bar" data-target="@player.TotalScore"></div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (Model.CompletedRoundNumber < PsrGameServer.Models.Tournament.MaxRounds - 1 || 
         (Model.CompletedRoundNumber >= PsrGameServer.Models.Tournament.MaxRounds - 1 && Model.CompletedRoundNumber < PsrGameServer.Models.Tournament.MaxRounds))
    {
        <div class="row mt-4">
            <div class="col-md-6 mx-auto">
                <div class="card bg-light">
                    <div class="card-header text-center">
                        <h5><i class="fas fa-info-circle"></i> Round @Model.CompletedRoundNumber Results</h5>
                    </div>
                    <div class="card-body">
                        <div class="round-summary">
                            @{
                                var round = Model.Tournament.Rounds.FirstOrDefault(r => r.RoundNumber == Model.CompletedRoundNumber);
                            }
                            @if (round != null)
                            {
                                <p><strong>Question:</strong> @round.Question</p>
                                <p><strong>Correct Answer:</strong> @round.CorrectAnswer</p>
                                <p><strong>Server Move:</strong> @round.ServerMove</p>
                                
                                var correctAnswers = Model.RoundResults.Count(r => r.AnswerCorrect);
                                var rockPaperScissorsWins = Model.RoundResults.Count(r => r.WonRound);
                                
                                <div class="stats">
                                    <div class="stat-item">
                                        <span class="stat-number">@correctAnswers</span>
                                        <span class="stat-label">Correct Answers</span>
                                    </div>
                                    <div class="stat-item">
                                        <span class="stat-number">@rockPaperScissorsWins</span>
                                        <span class="stat-label">RPS Winners</span>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="row mt-4">
        <div class="col-12 text-center">
            <div class="continue-controls">
                @if (Model.IsLastRound)
                {
                    <a href="/Home/GrandFinish" class="btn btn-warning btn-lg">
                        <i class="fas fa-crown"></i> View Final Results
                    </a>
                }
                else
                {
                    <a href="/" class="btn btn-primary btn-lg">
                        <i class="fas fa-arrow-right"></i> Continue to Next Round
                    </a>
                }
                
                <a href="/Home/Grid" class="btn btn-outline-secondary btn-lg ms-3">
                    <i class="fas fa-table"></i> View Detailed Grid
                </a>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Animate total scores counting up
    setTimeout(() => {
        const scoreElements = document.querySelectorAll('.total-score');
        scoreElements.forEach((element, index) => {
            setTimeout(() => {
                const target = parseInt(element.dataset.target);
                const roundScore = parseInt(element.parentElement.querySelector('.round-score').textContent.replace('+', ''));
                const startScore = target - roundScore;
                
                animateScore(element, startScore, target, 1000);
            }, index * 200);
        });
    }, 1000);
});

function animateScore(element, start, end, duration) {
    const range = end - start;
    const increment = range / (duration / 16);
    let current = start;
    
    const timer = setInterval(() => {
        current += increment;
        if (current >= end) {
            current = end;
            clearInterval(timer);
            
            // Add a celebration effect for score increase
            if (range > 0) {
                element.style.transform = 'scale(1.2)';
                element.style.color = '#28a745';
                setTimeout(() => {
                    element.style.transform = 'scale(1)';
                    element.style.color = '#495057';
                }, 300);
            }
        }
        element.textContent = Math.floor(current);
    }, 16);
}
</script>